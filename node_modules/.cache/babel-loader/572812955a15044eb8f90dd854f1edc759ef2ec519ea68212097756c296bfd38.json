{"ast":null,"code":"var _s = $RefreshSig$();\nimport { configureStore } from '@reduxjs/toolkit';\nimport pokemonSlice from './reducers/pokemon';\nimport { useDispatch, useSelector } from 'react-redux';\nexport const store = configureStore({\n  reducer: {\n    pokemon: pokemonSlice\n  }\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\n\nexport const useAppDispatch = () => {\n  _s();\n  return useDispatch();\n};\n_s(useAppDispatch, \"jI3HA1r1Cumjdbu14H7G+TUj798=\", false, function () {\n  return [useDispatch];\n});\nexport const useAppSelector = useSelector;","map":{"version":3,"names":["configureStore","pokemonSlice","useDispatch","useSelector","store","reducer","pokemon","useAppDispatch","_s","useAppSelector"],"sources":["/Users/admin/Downloads/companyAssignment/react-task-typescript/src/redux/store.ts"],"sourcesContent":["import { configureStore } from '@reduxjs/toolkit'\nimport pokemonSlice from './reducers/pokemon'\nimport { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\n\nexport const store = configureStore({\n  reducer: {\n    pokemon: pokemonSlice\n  },\n})\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>\n\n// Inferred type: {posts: PostsState, comments: CommentsState, users: UsersState}\nexport type AppDispatch = typeof store.dispatch\nexport type AppState = ReturnType<typeof store.getState>\nexport const useAppDispatch = () => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<AppState> = useSelector\n"],"mappings":";AAAA,SAASA,cAAc,QAAQ,kBAAkB;AACjD,OAAOC,YAAY,MAAM,oBAAoB;AAC7C,SAA+BC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAE5E,OAAO,MAAMC,KAAK,GAAGJ,cAAc,CAAC;EAClCK,OAAO,EAAE;IACPC,OAAO,EAAEL;EACX;AACF,CAAC,CAAC;;AAEF;;AAGA;;AAGA,OAAO,MAAMM,cAAc,GAAGA,CAAA;EAAAC,EAAA;EAAA,OAAMN,WAAW,CAAc,CAAC;AAAA;AAAAM,EAAA,CAAjDD,cAAc;EAAA,QAASL,WAAW;AAAA;AAC/C,OAAO,MAAMO,cAA8C,GAAGN,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}